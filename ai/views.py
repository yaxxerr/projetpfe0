from django.http import HttpResponse
from rest_framework import generics, permissions
from rest_framework.views import APIView
from rest_framework.response import Response
from django.utils import timezone
import random

from .models import (
    ChatbotMessage,
    GeneratedQuiz,
    ProgramRecommendation,
    PerformanceTracking
)
from .serializers import (
    ChatbotMessageSerializer,
    GeneratedQuizSerializer,
    ProgramRecommendationSerializer,
    PerformanceTrackingSerializer
)
from quizzes.models import Quiz, Question, Answer
from courses.models import Module


# --- Simple debug endpoints ---
def index(request): return HttpResponse("Welcome to Ai-endpoint")
def chatbot_messages_view(request): return HttpResponse("chatbot-messages-endpoint")
def generated_quizzes_view(request): return HttpResponse("generated-quizzes-endpoint")
def program_recommendations_view(request): return HttpResponse("program-recommendations-endpoint")
def performance_tracking_view(request): return HttpResponse("performance-tracking-endpoint")


# ðŸ’¬ Chatbot messages (advanced rule-based logic)
class ChatbotMessageListCreateView(generics.ListCreateAPIView):
    queryset = ChatbotMessage.objects.all()
    serializer_class = ChatbotMessageSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        user_input = serializer.validated_data['user_message'].strip().lower()
        bot_reply = self.generate_response(user_input)
        serializer.save(user=self.request.user, bot_response=bot_reply)

    def generate_response(self, message):
        keywords = {
            "linked list": "A linked list is a dynamic data structure where each element (node) links to the next. It's useful when frequent insertions/deletions are needed.",
            "binary tree": "A binary tree is a structure in which each node has at most two children. It's used in searching, sorting, and hierarchical data models.",
            "recursion": "Recursion occurs when a function calls itself to solve smaller instances of a problem. Common in factorials, Fibonacci, and tree traversals.",
            "oop": "OOP (Object-Oriented Programming) is a paradigm where you model programs using objects that encapsulate data and behavior. Core concepts include inheritance, encapsulation, polymorphism, and abstraction.",
            "python": "Python is a high-level language known for its simplicity and readability. It supports multiple paradigms including procedural and object-oriented programming."
        }

        for key, value in keywords.items():
            if key in message:
                return value

        greetings = ["hello", "hi", "hey", "salam"]
        if any(greet in message for greet in greetings):
            return "Hello! I'm your smart assistant. Ask me anything related to programming, computer science, or learning resources."

        return "I'm not sure I understand. Try rephrasing or ask something about data structures, programming, or algorithms."


# ðŸ§  Generated quizzes (smart fake logic)
class GeneratedQuizListCreateView(generics.ListCreateAPIView):
    queryset = GeneratedQuiz.objects.all()
    serializer_class = GeneratedQuizSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        user = self.request.user
        module = random.choice(Module.objects.all())
        quiz = Quiz.objects.create(
            title=f"Auto-Generated Quiz for {module.name}",
            description="This quiz was generated by the AI system.",
            duration=20,
            module=module,
            type="qcm",
            created_by=user
        )

        questions_pool = [
            {
                "question": "What is the time complexity of binary search?",
                "answers": ["O(n)", "O(log n)", "O(n log n)", "O(1)"],
                "correct": 1
            },
            {
                "question": "Which keyword is used to define a function in Python?",
                "answers": ["function", "def", "define", "fun"],
                "correct": 1
            },
            {
                "question": "What does 'self' represent in Python classes?",
                "answers": ["A keyword", "The class itself", "An instance of the class", "A function"],
                "correct": 2
            }
        ]

        for data in questions_pool:
            q = Question.objects.create(
                quiz=quiz,
                texte=data["question"],
                type="qcm"
            )
            for idx, text in enumerate(data["answers"]):
                Answer.objects.create(
                    question=q,
                    texte=text,
                    is_correct=(idx == data["correct"])
                )

        serializer.save(user=user, quiz=quiz)


# ðŸŽ¯ Program recommendations (simulated strengths/weaknesses)
class ProgramRecommendationListCreateView(generics.ListCreateAPIView):
    queryset = ProgramRecommendation.objects.all()
    serializer_class = ProgramRecommendationSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        user = self.request.user
        all_modules = list(Module.objects.all())
        random.shuffle(all_modules)

        recommended = all_modules[:3]
        program = serializer.save(user=user)
        program.recommended_modules.set(recommended)


# ðŸ“Š Performance tracking (clean save)
class PerformanceTrackingListCreateView(generics.ListCreateAPIView):
    queryset = PerformanceTracking.objects.all()
    serializer_class = PerformanceTrackingSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
