from django.db import models
from users.models import User
from courses.models import Module, Chapter
from notifications.models import Notification
from django.utils import timezone

class Quiz(models.Model):
    QUIZ_TYPE_CHOICES = (
        ('qcm', 'Multiple Choice'),
        ('free', 'Free Answer'),
    )

    CREATION_MODE_CHOICES = (
        ('manual', 'Created by Professor'),
        ('ai', 'Generated by AI'),
    )

    VISIBILITY_CHOICES = (
        ('public', 'Public'),
        ('private', 'Private'),
    )

    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    duration = models.IntegerField(help_text="Duration in minutes")
    type = models.CharField(max_length=10, choices=QUIZ_TYPE_CHOICES)
    module = models.ForeignKey(Module, on_delete=models.CASCADE)
    chapter = models.ForeignKey(Chapter, null=True, blank=True, on_delete=models.SET_NULL)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    creation_mode = models.CharField(max_length=10, choices=CREATION_MODE_CHOICES, default='manual')
    visibility = models.CharField(max_length=10, choices=VISIBILITY_CHOICES, default='public')
    students_allowed = models.ManyToManyField(User, related_name='private_quizzes', blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        creating = self._state.adding

        # Save first to access related objects
        super().save(*args, **kwargs)

        if creating:
            # Determine visibility
            if self.created_by and self.created_by.user_type == 'student':
                self.visibility = 'private'
                self.save(update_fields=['visibility'])
                self.students_allowed.set([self.created_by])
            else:
                self.visibility = 'public'
                self.save(update_fields=['visibility'])

                if self.creation_mode == 'manual' and self.created_by:
                    Notification.objects.create(
                        recipient=self.created_by,
                        message=f"You created a new quiz titled '{self.title}'."
                    )

                if self.module:
                    students = User.objects.filter(
                        user_type='student',
                        level=self.module.level,
                        speciality=self.module.speciality
                    )
                    for student in students:
                        Notification.objects.create(
                            recipient=student,
                            message=f"A new quiz '{self.title}' is available for your module: {self.module.name}."
                        )


class Question(models.Model):
    quiz = models.ForeignKey(Quiz, related_name='questions', on_delete=models.CASCADE)
    text = models.TextField()

    def __str__(self):
        return f"Q: {self.text}"


class Answer(models.Model):
    question = models.ForeignKey(Question, related_name='answers', on_delete=models.CASCADE)
    text = models.CharField(max_length=255)
    is_correct = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.text} ({'Correct' if self.is_correct else 'Wrong'})"


class QuizSubmission(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    student = models.ForeignKey(User, on_delete=models.CASCADE)
    selected_answers = models.ManyToManyField(Answer)
    submitted_at = models.DateTimeField(auto_now_add=True)
    score = models.FloatField(default=0.0)

    def calculate_score(self):
        total_questions = self.quiz.questions.count()
        correct = 0

        for question in self.quiz.questions.all():
            correct_answers = set(question.answers.filter(is_correct=True))
            selected = set(a for a in self.selected_answers.all() if a.question == question)
            if selected == correct_answers:
                correct += 1

        self.score = round((correct / total_questions) * 100, 2) if total_questions > 0 else 0.0
        self.save(update_fields=['score'])

        Notification.objects.create(
            recipient=self.student,
            message=f"ðŸ“Š You scored {self.score}% on quiz '{self.quiz.title}'."
        )

    def save(self, *args, **kwargs):
        creating = self._state.adding
        super().save(*args, **kwargs)
        if creating and self.score == 0.0:
            self.calculate_score()
